JPC-RR: User's manual:
======================

Note about this file:
---------------------
The layout here assumes monospaced font (such as 'Courier new'). So use something that supports monospaced fonts or
font selection to view this file.

Licence:
--------
JPC-RR is licenced under GNU GPL v2. See LicenceGPL2.txt.

Prerequisites:
--------------
To get started, you need BIOS image, VGABIOS image and DOS boot floppy and JDK for Java 5 or 6 standard edition (later
versions should they appear should also work). Note: JRE is not enough. These four are not included due to licencing and
size issues.

Working versions of first tree can be obtained from original JPC source package. The fourth can be downloaded from Sun
or installed from distro package maneger.

Working versions of BIOS/VGABIOS (diffrent versions) can also be obtained from Debian GNU/Linux by ripping them out of
certain packages. But using these is not recommended as they boot much slower than the one from JPC source (also, the
bochsbios-latest doesn't work it as it crashes the emulator core during boot). Also, DOS boot floppy can be obtained
from ODIN, but that floppy doesn't seem to work very well (wants to manually confirm each line of boot files).

Note that to play back recorded movies, you need exact same version of BIOS image, VGABIOS image and DOS boot floppy
as was used when making the movie.

Compiling:
----------
After JDK is installed, go to source directory and javac the following files (javac <file>):

JPCApplication.java
ImageMaker.java
ImageLibrary.java
org/jpc/plugins/*.java

Javac is smart enough to also compile all missing dependecies of the files.

Making JPC-RR format images from raw images:
--------------------------------------------
Due to various factors, JPC-RR can't use raw image files directly but requires its own image format. There is tool called
ImageMaker that can make JPC-RR images from raw images.

Each image has format, ID an name. Format and name are specified when making image. ID is automatically calculated from
format and contents. Name does not affect the ID but is purely for convience so you don't have to specify long image IDs
manually.

The syntax for ImageMaker when making images is:

$ java ImageMaker <format> [<options>...] <destination> <source> <name>

<destination> is file name for JPC-RR format image to write. <source> is either name of regular file (raw image file) or
name of directory tree with files (supported for making floppy or hard disk images only). In case of directory tree, the
files are layout deterministically to disk, so the ID will always be the same for given geometry and type. <name> is name
to give to disk.

Note: If making image from directory, the names of the files MUST conform to FAT naming restrictions (8+3 character names,
no spaces, etc). Avoid filenames with non-ASCII characters. Altough floppies formatted in DOS have limit of 224 files in
root directory, this limit is not applicable here (the minimum limit is 512 and if needed, imagemaker will automatically
increase the limit)

Note #2: Making boot disks from tree does NOT work. Even if you got system boot files there, it still won't work.

Note #3: Only floppy disks and hard drives can be made from directory trees. BIOS images and CDROM images require image 
file.

<format> is one of:
--BIOS                           BIOS image (note: VGABIOS is also of this type).
--CDROM                          CD-ROM image.
--HDD=cylinders,sectors,heads    Hard disk with specified geometry.
--floppy=tracks,sectors,sides    Floppy disk with specified geometry.
--floppy160                      160KiB floppy (40 tracks, 8 sectors, Single sided).
--floppy180                      180KiB floppy (40 tracks, 9 sectors, Single sided).
--floppy320                      320KiB floppy (40 tracks, 8 sectors, Double sided).
--floppy360                      360KiB floppy (40 tracks, 9 sectors, Double sided).
--floppy410                      410KiB floppy (41 tracks, 10 sectors, Double sided).
--floppy420                      420KiB floppy (42 tracks, 10 sectors, Double sided).
--floppy720                      720KiB floppy (80 tracks, 9 sectors, Double sided).
--floppy800                      800KiB floppy (80 tracks, 10 sectors, Double sided).
--floppy820                      820KiB floppy (82 tracks, 10 sectors, Double sided).
--floppy830                      830KiB floppy (83 tracks, 10 sectors, Double sided).
--floppy880                      880KiB floppy (80 tracks, 11 sectors, Double sided).
--floppy1040                     1040KiB floppy (80 tracks, 13 sectors, Double sided).
--floppy1120                     1120KiB floppy (80 tracks, 14 sectors, Double sided).
--floppy1200                     1200KiB floppy (80 tracks, 15 sectors, Double sided).
--floppy1440                     1440KiB floppy (80 tracks, 18 sectors, Double sided).
--floppy1476                     1476KiB floppy (82 tracks, 18 sectors, Double sided).
--floppy1494                     1494KiB floppy (83 tracks, 18 sectors, Double sided).
--floppy1600                     1600KiB floppy (80 tracks, 20 sectors, Double sided).
--floppy1680                     1680KiB floppy (80 tracks, 21 sectors, Double sided).
--floppy1722                     1722KiB floppy (82 tracks, 21 sectors, Double sided).
--floppy1743                     1743KiB floppy (83 tracks, 21 sectors, Double sided).
--floppy1760                     1760KiB floppy (80 tracks, 22 sectors, Double sided).
--floppy1840                     1840KiB floppy (80 tracks, 23 sectors, Double sided).
--floppy1920                     1920KiB floppy (80 tracks, 24 sectors, Double sided).
--floppy2880                     2880KiB floppy (80 tracks, 36 sectors, Double sided).
--floppy3120                     3120KiB floppy (80 tracks, 39 sectors, Double sided).
--floppy3200                     3200KiB floppy (80 tracks, 40 sectors, Double sided).
--floppy3520                     3520KiB floppy (80 tracks, 44 sectors, Double sided).
--floppy3840                     3840KiB floppy (80 tracks, 48 sectors, Double sided).

Avoid floppies with custom geometry, as DOS might not like them (moreover, floppy geometry DOES affect disk ID). Also avoid
HDDs with 1024 cyliders. The limits to geometry are following:

Allowed number of tracks/cyliders: 2-1024 (HDD), 1-256 (floppy)
Allowed number of sectors: 1-63 (HDD), 1-255 (floppy)
Allowed number of sides: 1-16 (HDD), 1 or 2 (floppy)

Following options are supported:

--library=file                   Immediately add the made disk to image library (see section about image libraries).
--volumelabel=label              Give specified volume label (affects ID). Only meaningful when making image out of
                                 directory tree. Default is no volume label.
--timestamp=YYYYMMDDHHMMSS       Give specified timestamp for files (affects ID). Only meaningful when making image out of
                                 directory tree. The default timestamp is 19900101T000000Z.

When storing floppy or HDD images, imagemaker automatically picks the storage method that results the smallest image file.

Image information:
------------------
When invoked as:

$ java ImageMaker <imagefile>

Variety of information about image is displayed (especially for floppies/HDDs). Two important fields are calculated and
claimed disk ID. They SHOULD be the same. If they are not, then the image file is corrupt (sadly, imagemaker has bugs and
bugs that cause it to write corrupt images have been seen).

Note: Although the IDs are 128 bits long, they are not MD5 hashes.

Image Libraries:
----------------
For locating images needed for playback/savestate restore, there are image libraries.

Image libraries are manipulated using ImageLibrary. The syntax is:

$ java ImageLibrary <library> <images>...

<library> is name of library file (if it doesn't exist, it will be created), and <images>... are zero or more images to
add. If needed, imagelibrary will remove images from library (but not the corresponding image files), if:

1) They no longer exist on disk, or
2) Filename of added image clashes with filename of existing image, or
3) ID of added image matches ID of existing image, or
4) Name of added image matches name of existing image.

Note that library refers to files by their full paths, so don't delete image files when they are in library nor move them
without readding the moved image.

--library=libfile option to imagemaker behaves like imagelibrary was run to add the image immediately after creating it.

The actual emulator:
--------------------

The actual emulator is invoked as:

$ java JPCApplication <options>...

The valid options are:
-library <library>               Use the specified image library when searching for images (can only be specified once).
-dumpvideo <prefix>              Dump all displayed image frames to PNG files with specified prefix.
-cpudivider <divider>            1GHz / CPU frequency (1-256).
-memsize <pages>                 Number of pages of memory (1 page is 4KiB).
-sysbios <image>                 Set system BIOS to use (Image ID or image name). Default is "BIOS"
-vgabios <image>                 Set VGA BIOS to use (Image ID or image name). Default is "VGABIOS"
-inittime <inittime>             Initial time for RTC on initial poweron. Milliseconds since 19700101T000000.000Z. Default
                                 is 1 000 000 000 000.
-fda <image>                     Set initial disk in fda (floppy drive A, image ID or image name).
-fdb <image>                     Set initial disk in fdb (floppy drive B, image ID or image name).
-hda <image>                     Set disk in hda (1st Hard drive, image ID or image name).
-hdb <image>                     Set disk in hdb (2st Hard drive, image ID or image name).
-hdc <image>                     Set disk in hdc (3st Hard drive, image ID or image name). If not present, there's cdrom
                                 drive there.
-hdd <image>                     Set disk in hdd (4st Hard drive, image ID or image name).
-cdrom <image>                   Set initial disk in cdrom drive (image ID or image name). Incompatible with -hdc.
-boot fda/hda/cdrom              Set boot device. fda boots from floppy drive A, hda boots from 1st hard disk and cdrom
                                 boots from cdrom. Due to practical reasons, it is often easiest to boot from floppy
                                 (fortunately floppy disk read time is NOT emulated).
-plugins                         Comma-seperated list of plugins to load. To pass arguments to some plugin, enclose the
                                 arguments in ().

Note: -boot doesn't work with some BIOS versions. Those versions prompt the boot device anyway.

Plugins:
--------
Plugins actually execute the tasks of the emulator. 

Different Plugins using the same output (like running PCMonitor and PNGDumper) should not conflict because connector
output hold locking is desinged to handle multiple readers.

If no plugin used requires GUI, then the emulator can be run without having GUI available.

plugin: org.jpc.plugins.PCControl
---------------------------------
Arguments: none
GUI: Yes
Runs the PC emulator core. Has capability to start/stop emulation, breakpoint after certain time or start/end of VGA
vertical retrace. Also can create, savestate and loadstate PC emulation. Memory dumping is supported.

plugin: org.jpc.plugins.PCRunner
--------------------------------
Arguments: none
GUI: No
Loads PC from savestate and just runs it. CTRL+C to quit.

plugin: org.jpc.plugins.PCMonitor
---------------------------------
Arguments: none
GUI: Yes
VGA monitor for emulated PC.

plugin: org.jpc.plugins.VirtualKeyboard
---------------------------------------
Arguments: none
GUI: Yes
On-screen keyboard for emulated PC.

plugin: org.jpc.plugins.PCStartStopTest
---------------------------------------
Arguments: none
GUI: Yes
Small plugin testing remote PC start/stop.

plugin: org.jpc.plugins.PNGDumper
---------------------------------
Arguments: Name of image prefix
GUI: No
Dumps all generated frames to PNG files. 


Error messages and explanations:
--------------------------------
<filename> is Not a valid image file
<filename> is not image file
<filename> claims to be floppy with illegal geometry: <x> tracks, <y> sides and <z> sectors.
<filename> claims to be HDD with illegal geometry: <x> tracks, <y> sides and <z> sectors.
Can't read disk image sector map.
Can't read disk image extent.
        Code expects <filename> to be valid JPC-RR format image, but it isn't JPC-RR image at all or its corrupt.

<filename> is image of unknown type.
<filename> has unrecognized geometry <x> <y> <z>
        Possibly corrupt image, not JPC-RR image, or JPC-RR image from future version containing something current version
        can't comprehend.

Invalid format specifier <something>.
        Invalid syntax of --floppy= or --HDD= option.

Invalid format specifier/option <something>.
        Invalid option or format specifier was given. Check for typos.

java ImageMaker [<options>...] <format> <destination> <source> <diskname>
        Check syntax of command. Especially that diskname is present!

The image has <nnn> sectors while it should have <yyy> according to selected geometry.
Raw image file length not divisible by 512.
Trying to read sector out of range.
        The selected geometry is wrong or raw image is incomplete.

Invalid disk name (Should not happen!).
Invalid geometry to be written.
        This is a very likely a bug in program.

What the heck <filename> is? It's not regular file nor directory.
        That sort of file can't be used as input for image making, or the file just doesn't exist.

BIOS images can only be made out of regular files.
CD images can only be made out of regular files.
        Source image specified is not regular file, but image of that type can't be made of anything else.

Can't read raw bios image file.
Can't read sector <nnn> from image.
        Reading the raw image file failed for some reason.

Bad library line: "<something>". Ignored.
        Syntax error in image library.

Removing image <something> a.k.a. "<something>" as it no longer exists.
        The image file no longer exists so it gets removed from library.

Removing image <something> a.k.a. "<something>" due to <some> conflict.
        Image library code killed some image from library due to some kind of conflict with image being added.

Too much data to fit into given space.
        The tree you gave contains takes just too much space to fit into disk of this size.
