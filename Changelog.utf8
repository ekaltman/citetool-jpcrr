Changes from JPC-RR Release 3 onwards:
======================================
- Fix broken BIOS image making.
- Add comments sections to images and record tree info to comments.
	Handy to know how to get the ID to match in case someone created the filesystem
	from tree.
- Collapse VirtualClock to Clock.
- Refactor FPU core to be inside FPU class.
- Merge real and protected mode FPU emulation code.
- Remvoe unneeded stuff from top-level FPU class.
- Refactor FPU emulation. 
	Support CPU without FPU and support EM, TS, MP and ET bits.

Changes from JPC-RR Release 2 to JPC-RR Release 3:
==================================================
- Merge user manual and savestate docs, write devel docs and convert all that to Lyx.
- Try to support auto-init DMA (for soundcard).
- Update Changelog to include stuff before r1.
- Add external commands interface to control plugins from others
- Bump PNG counter from 6 digits to 12 so all movies can be dumped.
- Don't allow using scancodes 0, 84 and 198.
- Print usage on command line errors for ImageMaker.

Changes from JPC-RR Release 1 to JPC-RR Release 2:
==================================================
- Optimize disk ID calculation
	Optimize disk ID calculation by special-casing the handling of all-zero blocks in hash
	plus doing the necessary modifications in order to exploit that special case. In case
	of used space being small in comparison to total space, this cuts the time to compute
	the disk ID by HALF.
- Fix bug in assigning audio output IDs in presence of same module loaded multiple times
- Warn if audio input ID in raw audio dumper is invalid

Changes from JPC to JPC-RR Release 1:
=====================================
- Remove background compiler
	One really doesn't need the nondeterminism JIT brings.
- Remove applet code and debugger
	This is not going to run as applet and debugger isn't something I would want to keep
	up to date.
- Remove ethernet and serial port emulation
	Multi-machine emulation is nightmare to make sync.
- Make TSC exact number of instructions executed, not guess based on frequency
- Synchronize all timing to CPU
- Replace all block device types with GenericBlockDevice
	GenericBlockDevice can handle all types of block backed by DiskImage, and DiskImage
	can handle COW (Copy-On-Write).
- Don't allow save/loadstate on running PC
	Savestating on running PC is racy and produces unusable savestate.
- Variable CPU speed/memory size/BIOS image support
- Add VGA retrace start/stop traps and timed traps
	This is frame / time advance mecanism.
- Textual status dump
	Textual status dump is powerful tool when debugging desyncs.
- Implement new savestate mechanism and remove the old
	The old mechanism just didn't cut it. New mechanism is brute-force but works.
- Video dumping support
	Support dumping video to series of PNG files
- Add tools for making image files
- Image library code
	Needed images are searched via image library.
- Handle triple faults
	Reboot PC on triple fault instead of crashing the emulator core.
- Enable start/stop as apporiate
- Don't hang the UI during savestate and related operations
- Remove mouse input support
	To be reintroduced later
- Create PC from GUI, not before it
- Allow fast exits out of CPU emulator
- Fix the "11 micro-ops" bug.
- Dedicated timer priority queue class
	The standard one from java.util.<foo> just isn't deterministic enough.
- Use stderr instead of logger
	Makes nicer-looking console output.
- Support dumping emulated RAM
- Plugins and modules support
	These are for future extensions, so devices can be added without breaking timing.
- Move previous JPCApplication/PCMonitor code to plugins
- Display errors as dialogs if GUI available, on console if not
- Event recording/playback code
- Audio dumping support + PCSpeaker audio output support
